{
  "sketches": [
    {
      "sketchName": "final",
      "sketchCode": "let credits = { \n    \"student_names\": \"Jo√© Mertenat, Jiwon Kim\", \n    \"recode_artist\": \"Roman Verostko\", \n    \"recode_title\": \"Pathway Series\", \n    \"recode_year\": 1989 \n} \n\n\nlet wiggle1, wiggle2, wiggle3, wiggle4;\n\nlet bug1, bug2, bug3;\n\n\n\nvar shapes = [];\nvar lineboxes = [];\nvar Density = 1;\nvar shapeHeight = 30;\nvar shapeColor;\n\nvar newShape;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tbackground(230, 255, 255);\n\tnoStroke();\n\t\n\t\n\tangleMode(DEGREES)\n\t//fill(0, 40);\n\n\n\n\tr = random(0, 255);\n\tg = random(0, 255);\n\tb = random(0, 255);\n\ta = random(30, 200);\n\n\n\tshapeColor = color(r, g, b, a);\n\n\tlineboxes.push(new LineBox(width * .55, height * .16, color(210, 0, 220, 1))); // , color()\n\tlineboxes.push(new LineBox(width * .10, height * .55, color(100, 150, 200, 2)));\n\tlineboxes.push(new LineBox(width * .45, height * .5, color(100, 150, 20, 2)));\n\tlineboxes.push(new LineBox(width * .85, height * .15, color(10, 150, 20, 2)));\n\tlineboxes.push(new LineBox(width * .15, height * .45, color(150, 150, 10, 2)));\n\tlineboxes.push(new LineBox(width * .50, height * .65, color(10, 0, 200, 2)));\n\tlineboxes.push(new LineBox(width * .5, height * .85, color(10, 10, 20, 2)));\n\tlineboxes.push(new LineBox(width * .35, height * .5, color(210, 15, 200, 2)));\n\n\n\t//fill(0, 40);\n\twiggle1 = new Wiggle();\n\twiggle2 = new Wiggle();\n\twiggle3 = new Wiggle();\n\twiggle4 = new Wiggle();\n\n\tbug1 = new Square();\n\tbug2 = new Square();\n\tbug3 = new Square();\n\t\n\tsetupAudio();\n}\n\nfunction draw() {\n\t\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\twiggle1.display()\n\twiggle2.display()\n\twiggle3.display()\n\twiggle4.display()\n\t//background(230, 255, 255);\n\t\n\n\n\t//bug1.move();\n\tbug1.display();\n\t//bug2.move();\n\tbug2.display();\n\t//bug3.move();\n\tbug3.display();\n\n\n\tshapes.forEach(function(shape) {\n\t\tshape.draw();\n\t});\n\n\tlineboxes.forEach(function(linebox) {\n\t\tlinebox.display();\n\t});\n\n\tif(newShape) {\n\t\tnewShape.x2 = mouseX;\n\t\tnewShape.y2 = mouseY;\n\t\tnewShape.h = shapeHeight;\n\t\tnewShape.c = shapeColor;\n\t\tnewShape.draw();\n\t}\n\n}\n\nfunction Shape(x1, y1, x2, y2, h, c) {\n\tthis.x1 = x1;\n\tthis.y1 = y1;\n\tthis.x2 = x2;\n\tthis.y2 = y2;\n\tthis.h = h;\n\tthis.c = c;\n\n\tShape.prototype.draw = function() {\n\t\tvar w = dist(this.x1, this.y1, this.x2, this.y2);\n\t\tvar a = atan2(this.y2 - this.y1, this.x2 - this.x1);\n\t\tstroke(this.c);\n\n\t\tpush();\n\t\ttranslate(this.x1, this.y1);\n\t\trotate(a);\n\t\ttranslate(0, -this.h / 2);\n\t\tfor(var i = 0; i < this.h; i += Density) {\n\t\t\tline(0, i, w, i);\n\t\t}\n\t\tpop();\n\t};\n}\n\nfunction mousePressed() {\n\t//newShape = new Shape(pmouseX, pmouseY, mouseX, mouseY, shapeHeight, shapeColor);\n\n}\n\nfunction mouseReleased() {\n\t// shapes.push(newShape);\n\t// newShape = undefined;\n\n\n}\n\n\nclass Wiggle {\n\tconstructor() {\n\n\t\tthis.up = 0;\n\t\tthis.upright = 1;\n\t\tthis.rihgt = 2;\n\t\tthis.bottomright = 3;\n\t\tthis.bottom = 4;\n\t\tthis.bottomleft = 5;\n\t\tthis.left = 6;\n\t\tthis.upleft = 7;\n\t\tthis.direction;\n\t\tthis.lineX = random(width);\n\t\tthis.lineY = random(height);\n\n\t\tthis.stepSize = 1;\n\t\tthis.diameter = 1;\n\n\t\tthis.r = random(0, 255);\n\t\tthis.g = random(0, 255);\n\t\tthis.b = random(0, 255);\n\t\t\n\n\t\tthis.X = width / 2;\n\t\tthis.Y = height / 2;\n\t}\n\tdisplay() {\n\t\tfor(var i = 0; i <= 0.1+ampEase*4; i++) {\n\t\t\tthis.direction = int(random(0, 8));\n\t\t\t\n\t\t\tif(this.direction == this.up) {\n\t\t\t\tthis.Y -= this.stepSize;\n\t\t\t} else if(this.direction == this.upright) {\n\t\t\t\tthis.X += this.stepSize;\n\t\t\t\tthis.Y -= this.stepSize;\n\t\t\t} else if(this.direction == this.rihgt) {\n\t\t\t\tthis.X += this.stepSize;\n\t\t\t} else if(this.direction == this.bottomright) {\n\t\t\t\tthis.X += this.stepSize;\n\t\t\t\tthis.Y += this.stepSize;\n\t\t\t} else if(this.direction == this.bottom) {\n\t\t\t\tthis.Y += this.stepSize;\n\t\t\t} else if(this.direction == this.bottomleft) {\n\t\t\t\tthis.X -= this.stepSize;\n\t\t\t\tthis.Y += this.stepSize;\n\t\t\t} else if(this.direction == this.left) {\n\t\t\t\tthis.X -= this.stepSize;\n\t\t\t} else if(this.direction == this.upleft) {\n\t\t\t\tthis.X -= this.stepSize;\n\t\t\t\tthis.Y -= this.stepSize;\n\t\t\t}\n\n\t\t\t// change values to limit drawing size\n\t\t\tif(this.X > width * .75+amp) this.X = this.width * .25;\n\t\t\tif(this.X < width * .25) this.X = this.width * .75;\n\t\t\tif(this.Y < 0) this.Y = height;\n\t\t\tif(this.Y > height) this.Y = 0;\n\n\t\t\tellipse(this.X + this.stepSize / 1, this.Y + this.stepSize / 1, this.diameter / 7, this.diameter / 7);\n\t\t}\n\n\n\n\t\tthis.r += random(-5, 5);\n\t\tthis.g += random(-5, 5);\n\t\tthis.b += random(-5, 5);\n\n\n\t\tstroke(this.r, this.g, this.b);\n\t}\n}\n\nclass Square {\n\tconstructor() {\n\t\tthis.x = random(width);\n\t\tthis.y = random(height);\n\t\tthis.big = random(70, 30);\n\t\tthis.speed = .7;\n\n\t}\n\n\t// move() {\n\t// \tthis.x += random(-this.speed, this.speed);\n\t// \tthis.y += random(-this.speed, this.speed);\n\t// }\n\n\tdisplay() {\n\t\tpush();\n\t\tnoStroke();\n\t\t//fill(this.r, this.g,this.b);\n\t\tfill(180, 130, 90, 1);\n\t\trect(this.x, this.y, this.big, this.big);\n\n\t\tpop();\n\n\n\t}\n}\n\nclass LineBox {\n\tconstructor(x, y, myColor) {\n\t\tthis.x = x; //random(width) / 2;\n\t\tthis.y = y //random(height) /2;\n\t\tthis.h = height * .03\n\t\tthis.w = random(150, width * .2)\n\t\tthis.rotation = random(360);\n\t\tthis.color = myColor; //random(150, 255);\n\t}\n\n\t// move() {\n\t// \tthis.x += random(-this.speed, this.speed);\n\t// \tthis.y += random(-this.speed, this.speed);\n\t// }\n\n\tdisplay() {\n\t\tpush();\n\t\tnoStroke();\n\t\t//fill(this.r, this.g,this.b);\n\t\tfill(this.color);\n\t\ttranslate(this.x, this.y)\n\t\trotate(this.rotation)\n\t\trect(0, 0, this.w, this.h);\n\n\t\tpop();\n\n\n\t}\n}\n\n\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 10,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 1,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}