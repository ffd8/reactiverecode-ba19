{
  "sketches": [
    {
      "sketchName": "reactive-recode-final",
      "sketchCode": "let credits = { \n    \"student_names\": \"\", \n    \"recode_artist\": \"\", \n    \"recode_title\": \"\", \n    \"recode_year\": 0 \n} \nlet font, myText = [\"<REACTIVE\", \"RECODE>\"];\nlet points = [];\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tstroke(255);\n\tfont = loadFont('includes/fonts/RobotoMono-Regular.ttf', function() {\n\t\tgetPoints(myText);\n\t});\n\trectMode(CENTER);\n\tsetupAudio();\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\tbackground(0, 80);\n\ttranslate(width / 4, height * .6);\n\tif(points.length > 0) {\n\t\tbeginShape(LINES);\n\t\tfor(let j = 0; j < points[0].length; j += 2) {\n\t\t\tvar pt = points[0][j];\n\t\t\tvar ptSel = points[1][floor(map(j, 0, points[0].length, 0, points[1].length))];\n\t\t\tlet f = fft[floor(map(j, 0, points[0].length, 0, fft.length))]\n\t\t\tlet wf = waveform[floor(map(j, 0, points[0].length, 0, waveform.length / 2))]\n\t\t\tstroke(map(f, 0, 255, 50, 255))\n\t\t\tif(ampEase < .1) {\n\t\t\t\tstroke(255)\n\t\t\t}\n\t\t\tvertex(pt.x, pt.y - 100);\n\t\t\tvertex(pt.x + wf * 70, pt.y - 100 - ampEase / 2);\n\t\t}\n\t\tendShape();\n\n\t\tbeginShape(LINES);\n\t\tfor(let j = 0; j < points[1].length; j += 2) {\n\t\t\tvar pt = points[1][j];\n\t\t\tlet f = fft[floor(map(j, 0, points[0].length, 0, fft.length))]\n\t\t\tlet wf = waveform[floor(map(j, 0, points[0].length, waveform.length / 2, waveform.length))]\n\t\t\tstroke(map(f, 0, 255, 255, 50))\n\n\t\t\tvertex(pt.x, pt.y + 100);\n\t\t\tvertex(pt.x + wf * 70, pt.y + 100 - ampEase / 4);\n\t\t}\n\t\tendShape();\n\t}\n}\n\nfunction getPoints(txt) {\n\tlet s = width / txt[0].length;\n\tfor(let i = 0; i < txt.length; i++) {\n\t\tpoints[i] = font.textToPoints(txt[i], 0, 0, s);\n\t}\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft, waveform, amp = 0.0,\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}
