{
  "sketches": [
    {
      "sketchName": "Newest_timo_jonas_without_slider",
      "sketchCode": "let credits = {\n\t\"student_names\": \"Timo Reber, Jonas von Arb\",\n\t\"recode_artist\": \"Peter Kreis\",\n\t\"recode_title\": \"Compart Nr. 10\",\n\t\"recode_year\": 1970\n}\n\n/*  \n--press Enter\n--press 1\n--press 2\n--press 3\n--press 4\n--press a\n--press s\n--press d\n--press Enter\n--drag your mouse\n*/\n\nlet cols, rows;\nlet scl;\nlet w;\nlet h;\nlet terrain = [];\nlet am; //anzahl pro reihe\nlet R;\nlet rSlider, gSlider, bSlider;\nlet rotSlider, sizeSlider, amouSlider, distSlider;\nlet flyingX = 0;\nlet flyingY = 0;\n\nfunction setup() {\n\t// let canva = createCanvas(windowWidth, windowHeight, WEBGL);\n\t// canva.id('canva');\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\t// create sliders\n\n\n\n\n\tangleMode(DEGREES);\n\tframeRate();\n\t\/\/pixelDensity(3);\n\tsetupAudio();\n\n\tgl = this._renderer.GL;\n\tgl.disable(gl.DEPTH_TEST);\n\n}\n\nfunction draw() {\n\n\n\n\n\tif(keyIsDown(49)) {\n\t\tstroke(0, 255, 255);\n\t\tfill(255, 0, 255);\n\t} else if(keyIsDown(50)) {\n\t\tstroke(0, 0, 255);\n\t\tfill(0, 255, 0);\n\t} else if(keyIsDown(51)) {\n\t\tstroke(0, 255, 0);\n\t\tfill(0, 0, 255);\n\t} else if(keyIsDown(52)) {\n\t\tstroke(255, 255, 255);\n\t\tfill(0, 0, 0);\n\t} else if(keyIsDown(65)) {\n\t\tsize = 0;\n\t} else if(keyIsDown(83)) {\n\t\t size = 3;\n\t} else if(keyIsDown(68)) {\n\t\t size = 5;\n\t}else if(keyIsDown(82)) {\n\t\t rot = 3;\n\t}else {\n\t\tsize=1;\n\t\tstroke(255, 215, 0);\n\t\tfill(255, 165, 0);\n\t}\n\n\ts = width * 2;\n\tam = 30; // amount *max 110\n\n\n\ttranslate(0, 0, -width - 7 * width / 10 * size);\n\n\tif(keyIsDown(13)) {\n\n\t} else {\n\t\tbackground(0, 10)\n\n\t}\n\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\n\tscl = s / am; // size\n\tw = s;\n\th = s;\n\tcols = round(w / scl);\n\trows = round(h / scl);\n\tflyingX -= 0.01;\n\tflyingY -= 0.002;\n\n\n\n\tstrokeWeight(10);\n\tif(mouseY>height/2){\n\trotateY(10+ frameCount*3);\n\t}else{\n\t\trotateY(10);\n\t}\n\trotateX(75);\n\ttranslate(-(scl * am / 2) + 1 / 2 * scl, -(scl * am / 2) + 1 / 2 * scl, -height / 2);\n\t/*grundsätzliche Fläche*/\n\tlet yoff = flyingY;\n\tfor(let y = 0; y < rows; y++) {\n\t\tterrain[y] = []; // erste variabel für 2d Array\n\t\tlet xoff = flyingX;\n\t\tfor(let x = 0; x < cols + 1; x++) {\n\t\t\tlet disto = map(mouseX, 0, width, -5, 5);\n\t\t\tlet noiseX = map(noise(xoff, yoff), 0, 1, -disto, disto)\n\t\t\tlet mapT = map(fft[y] * 0.05 + noiseX, 0, 1, -50, 50);\n\n\t\t\txoff += 0.1;\n\t\t\tterrain[y][x] = mapT;\n\t\t}\n\t\tyoff += 0.0;\n\n\t}\n\tif(frameCount % 10 == 0) {\n\t\tlet mapWave = map(fft[1], -1, 1, 0, 5);\n\t}\n\t/*bouncy Thing*/\n\tfor(let y = 0; y < rows; y++) {\n\t\tbeginShape(TRIANGLE_STRIP);\n\t\tfor(let x = 0; x < cols; x++) {\n\t\t\tmapMX = map(mouseX, 0, width, 0, 1);\n\t\t\tmapMY = map(mouseY, 0, height, 0, 1);\n\t\t\tlet gro = am * 0.02;\n\t\t\tlet posX = am * mapMX /* noise(frameCount * 0.01)*/ ;\n\t\t\tlet posY = am * mapMY /* noise(frameCount * 0.012)*/ ;\n\n\t\t\tif(dist((posX), (posY), x, y) <= am / 4) {\n\t\t\t\tlet mapAnpa = map(fft[x] * 0.05, 0, 1, -50, 50);\n\t\t\t\tlet mapT = map(dist(posX, posY, x, y), 0, am / 4, 180 + amp * 0.2, 0);\n\t\t\t\tterrain[x][y] = mapAnpa + pow(1.04, mapT);\n\t\t\t}\n\n\t\t\tif(dist(0, 0, 0, (gro), (gro), 0) >= dist((posX), (posY), 0, x, y, 0)) {\n\t\t\t\tlet mapAnpa = map(fft[y] * 0.05, 0, 1, -50, 50);\n\t\t\t\tterrain[x][y] = mapAnpa + noise(x * y * 10 + frameCount * .1) * 20 * amp; //lets the tower bounce\n\t\t\t\tlet xoff = flyingX;\n\n\t\t\t\tif(dist(0, 0, 0, gro - 1, gro - 1, 0) >= dist((posX), (posY), 0, x, y, 0)) {\n\n\t\t\t\t\t//terrain[x][y] = mapAnpa + noise(xoff, yoff); //lowers Center\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t/*builds up the howle thing*/\n\t\t\tvertex(x * scl, y * scl, terrain[x][y]);\n\t\t\tvertex(x * scl, (y + 1) * scl, terrain[x][y + 1]);\n\t\t}\n\t\tendShape();\n\t}\n\n\torbitControl(5);\n\n}\n\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft, waveform, amp = 0.0,\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average amplitude\n\t//ampEase = ease(amp, ampEase, 0.75); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}
