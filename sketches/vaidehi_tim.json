{
  "sketches": [
    {
      "sketchName": "vaidehi_tim_20190612115946",
      "sketchCode": "let credits = {\n\t\"student_names\": \"Vaidehi Hofer, Tim Bacher\",\n\t\"recode_artist\": \"Vladimir Bonačić\",\n\t\"recode_title\": \"PLN 5\",\n\t\"recode_year\": 1969\n}\n\nlet drifts = [];\nlet step = 30;\nlet minspeed = 0.3;\nlet maxspeed = 1;\nlet col = 255;\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tsetupAudio();\n\tfor(let i = 0; i < 15; i++) {\n\t\tdrifts.push(new Drift(0, random(minspeed, maxspeed)));\n\t\tdrifts.push(new Drift(random(minspeed, maxspeed), 0));\n\t\tdrifts.push(new Drift(-random(minspeed, maxspeed), 0));\n\t\tdrifts.push(new Drift(0, -random(minspeed, maxspeed)));\n\t}\n}\n\nfunction draw() {\n\tupdateAudio();\n\tif(ampEase < 1) {\n\t\tbackground(0, 25);\n\t}\n\tif(ampEase > 1) {\n\t\tbackground(0, 130 - ampEase * 1.6);\n\t}\n\tif(ampEase > 95) {\n\t\tbackground(0, 15);\n\t}\n\tfor(d of drifts) {\n\t\tif(ampEase > 150) {\n\t\t\td.move(9 - ampEase * .06);\n\t\t} else {\n\t\t\td.move(-3 + ampEase * .1);\n\t\t}\n\t\td.display();\n\t}\n\tlet my = map(mouseY, 0, height, 0, 255);\n\tlet mx = map(mouseX, 127.5, width, 0, 255);\n\tif(mouseX > width / 2 && mouseY < height / 2) {\n\t\tcol = color(255, my * 2, 255 - (mx - 127.5) * 2);\n\t}\n\tif(mouseX > width / 2 && mouseY > height / 2) {\n\t\tcol = color(255 - (my - 127.5) * 2, 255, 255 - (mx - 127.5) * 2);\n\t}\n\tif(mouseX < width / 2 && mouseY < height / 2) {\n\t\tcol = color(mx * 2, my * 2, 255);\n\t}\n\tif(mouseX < width / 2 && mouseY > height / 2) {\n\t\tcol = color((my - 127.5) * 2 + mx * 2, 255, 255);\n\t}\n}\n\nclass Drift {\n\tconstructor(xmove, ymove) {\n\t\tthis.x = step * (round(random(width) / step));\n\t\tthis.y = step * (round(random(height) / step));\n\t\tthis.xmove = xmove;\n\t\tthis.ymove = ymove;\n\t}\n\n\tmove(speed) {\n\t\tif(this.x > width + step / 2) {\n\t\t\tthis.x = 0 - step / 2;\n\t\t}\n\t\tif(this.x < -step / 2) {\n\t\t\tthis.x = width + step / 2;\n\t\t} else {\n\t\t\tthis.x += this.xmove * speed;\n\t\t}\n\t\tif(this.y > height + step / 2) {\n\t\t\tthis.y = 0 - step / 2;\n\t\t}\n\t\tif(this.y < -step / 2) {\n\t\t\tthis.y = height + step / 2;\n\t\t} else {\n\t\t\tthis.y += this.ymove * speed;\n\t\t}\n\t}\n\n\tdisplay() {\n\t\tstroke(col);\n\t\tif(ampEase > 75) {\n\t\t\tnoFill();\n\t\t\tstrokeWeight(ampEase * .008);\n\t\t\tstroke(col);\n\t\t} else {\n\t\t\tfill(col);\n\t\t}\n\t\tellipse(this.x, this.y, step + amp * .3);\n\t}\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft, waveform, amp = 0.0,\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average amplitude\n\tampEase = ease(amp, ampEase, 0.3); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}
