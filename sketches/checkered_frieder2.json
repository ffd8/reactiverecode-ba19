{
  "sketches": [
    {
      "sketchName": "checkered_frieder2",
      "sketchCode": "\n\nlet credits = {\n\t\"student_names\": \"Natalie Gregor, Rahel Tonini, Karin Hugentobler\",\n\t\"recode_artist\": \"Frieder Nake\",\n\t\"recode_title\": \"Walk-Through Raster\",\n\t\"recode_year\": 1972\n}\n\nlet xq = 0\nlet yq = 0\nlet oxq = 0\nlet bxq = 0\nlet oyq = 0\nlet byq = 0\nlet o2xq = 0\nlet o2yq = 0\nlet yellowboxes = [],\n\tyellowboxesAudio = [],\n\torangeboxes = [],\n\tblueboxes = [],\n\torangeboxes2 = [];\n\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\tgenBoxes()\n\tangleMode(DEGREES)\n\tsetupAudio();\n}\n\n\nfunction genBoxes() {\n\n\tyellowboxes = []\n\torangeboxes = []\n\tblueboxes = []\n\torangeboxes2 = []\n\tlet x2 = 20\n\tlet y2 = 0\n\tlet x3 = width / 2\n\tlet y3 = height / 2\n\tlet x4 = width / 2\n\tlet y4 = height / 2\n\tlet ww = (width / 2)\n\tlet wh = 50\n\tlet quadrat = ww / 50\n\n\tfor(let j = 0; j < 40; j++) {\n\t\tfor(let i = 0; i < 40; i++) {\n\n\t\t\t//*yellow\n\t\t\txq = (width / 4) + quadrat * i; //x position of quadratis\n\t\t\tyq = wh + quadrat * j;\n\t\t\tif(xq < width / 1.8 && yq < height / 1.7 && random(50) < 15) {\n\t\t\t\tyellowboxes.push(createVector(xq, yq, width * .15))\n\t\t\t\tyellowboxesAudio.push(createVector(random(7), random(2), random(2)));\n\t\t\t}\n\t\t\t//*orange\n\t\t\tlet ool = int(dist(oxq, oyq, x2, y2)); //* distanz von oberem linken Ecken zu blauen Quadrtate\n\t\t\toxq = (width / 4 + 5) + quadrat * i;\n\t\t\toyq = wh + quadrat * j;\n\t\t\tif(oxq < width / 1.8 && oyq < height / 1.7 && random(90) < 15 && ool > 350) {\n\t\t\t\torangeboxes.push(createVector(oxq, oyq, width * .15))\n\t\t\t}\n\t\t\t//*orange the second\n\t\t\tlet o2ol = int(dist(o2xq, o2yq, x4, y4)); //* distanz von oberem linken Ecken zu blauen Quadrtate\n\t\t\to2xq = (width / 3 + 46) + quadrat * i\n\t\t\to2yq = (wh + 206) + quadrat * j;\n\t\t\tif(o2xq < width / 4 + 200 && o2yq < height / 1.7 - 120 && random(0, 500) < 50 && o2ol < 500) {\n\t\t\t\torangeboxes2.push(createVector(o2xq + random(-2, 2), o2yq, width * .15))\n\t\t\t}\n\n\t\t\t//*blue\n\t\t\tbxq = (width / 4 + 5) + quadrat * i;\n\t\t\tbyq = wh + quadrat * j;\n\t\t\tlet bol = int(dist(bxq, byq, x2, y2)); //* distanz von oberem linken Ecken zu blauen Quadrtaten\n\t\t\tlet bur = int(dist(bxq, byq, x3, y3)); //* distanz von unterem rechten Ecken zu blauen Quadrtaten\n\t\t\tif(bxq < width / 1.8 && byq < height / 1.7 && random(200) < 11 && bol > 450 && bur > 100) {\n\t\t\t\tblueboxes.push(createVector(bxq, byq, width * .15))\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunction draw() {\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\tdib = int(dist(width / 1.7 - 100, height / 2+10, mouseX, mouseY))\n\n\tbackground(255);\n\n\t//*Quadris gelb\n\n\tnoFill();\n\tstroke(255, 215, 0);\n\tstrokeWeight(2.5);\n\tfor(let i = 0; i < yellowboxes.length; i++) {\n\n\n\n\n\t\tlet yellowbox = yellowboxes[i];\n\t\tlet yellowboxAudio = yellowboxesAudio[i];\n\t\tif(yellowbox.x == undefined) {\n\t\t\tprint(\"yellowbox\")\n\t\t}\n\t\trect(yellowbox.x, yellowbox.y, yellowbox.z, yellowbox.z)\n\t\t\t\tif(mouseX > 200 && mouseX < 970 && mouseY < 700) {\n // set 0, 0 origin\n\t\t//scale(map(ampEase, 0, 1000, 1, 10*yellowboxAudio.x))\n\t\t//rotate(ampEase)\n\t\t//+ampEase*i*.1\n\t\trect(yellowbox.x, yellowbox.y, yellowbox.z*ampEase*i*-0.0001*yellowboxAudio.y*ampEase*i*-0.00006, yellowbox.z)\n\trect(yellowbox.x, yellowbox.y, yellowbox.z*ampEase*i*-0.0001*yellowboxAudio.x*ampEase*i*0.00001, yellowbox.z)\n\t\t}\n\n\t\tif(dib < 200 && mouseIsPressed) {\n\t\t\tstroke(0, 100, 200)\n\t\t}\n\t}\n\n\n\t//*Quadris orange\n\n\n\tstroke(255, 99, 71);\n\tstrokeWeight(2.5);\n\tfor(let i = 0; i < orangeboxes.length; i++) {\n\t\tscale(1)\n\t\tlet orangebox = orangeboxes[i];\n\t\tif(orangebox.x == undefined) {\n\t\t\tprint(\"orangebox\")\n\t\t}\n\t\trect(orangebox.x, orangebox.y, orangebox.z, orangebox.z)\n\t\tif(mouseX > 200 && mouseX < 970 && mouseY < 700) {\n\n\t\trect(orangebox.x, orangebox.y, orangebox.z, orangebox.z * -ampEase / 180)\n\t\t}\n\t\tif(mouseX > 200 && mouseX < 970 && amp>100) {\n\t\t}\n\t\t\tif(dib < 200 && mouseIsPressed) {\n\t\t\tstroke(255, 215, 0)\n\t\t}\n\t}\n\n\n\t//*Quadris orange the second\n\n\n\t//blendMode(HARD_LIGHT)\n\tpush();\n\tstroke(255, 99, 71);\n\tstrokeWeight(3.2);\n\tfor(let i = 0; i < orangeboxes2.length; i++) {\n\t\tscale(1)\n\t\tlet orangebox2 = orangeboxes2[i];\n\t\tif(orangebox2.x == undefined) {\n\t\t\tprint(\"orangebox2\")\n\t\t}\n\t\trect(orangebox2.x, orangebox2.y, orangebox2.z, orangebox2.z)\n\t\t\n\t\tif(dib < 200) {\n\t\t\tstrokeWeight(8)\n\n\t\t}\n\t\tif(ampEase > 80 && dib < 200) {\n\t\t\tlet sco2 = map(ampEase, 2, 4000, 0, 0.6)\n\t\t\tscale(1 + sco2)\n\t\t\tstrokeWeight(9)\n\t\t\trotate(0.0001)\n\t\t\tblendMode(DIFFERENCE)\n\t\t\trect(orangebox2.x + random(-300, 300), orangebox2.y + random(-300, 100), orangebox2.z, orangebox2.z)\n\t\t}\n\t\t\tif(dib < 10 && mouseIsPressed) {\n\t\t\tstroke(255, 215, 0)\n\t\t}\n\t}\n\tpop();\n\n\t//*Quadris blue\n\n\tstroke(0, 100, 200);\n\tstrokeWeight(2.8);\n\tfor(let i = 0; i < blueboxes.length; i++) {\n\t\tlet bluebox = blueboxes[i];\n\t\tif(bluebox.x == undefined) {\n\t\t\tprint(\"blue\")\n\t\t}\n\nif (dist(mouseX-100, mouseY-100, bluebox.x,bluebox.y)<100){\n\tvar Fett=5;\n\t\n} else { Fett=2\n\t\n}\n\t\tlet fftIndex = map(i, 0, 40, 0, fft.length)\n\t\tlet audioFFT = fft[floor(fftIndex)];\n\t\tstrokeWeight(Fett);\n\t\trect(bluebox.x, bluebox.y, bluebox.z, bluebox.z);\n\t\t\n\t\tif(mouseX > 200 && mouseX < 970 && mouseY < 700) {\n\t\t\trect(bluebox.x, bluebox.y - ampEase * -mouseY / 550, bluebox.z, bluebox.z * ampEase / 300 * mouseX / 200);\n\t\t}\n\t\t\tif(dib < 200 && mouseIsPressed) {\n\t\t\tstroke(255, 99, 71)\n\t\t}\n\n\n\n\t\t/*if(dib < 200 && mouseIsPressed) {\n\t\t\tstroke(0)\n\t\t}*/\n\t}\n}\n\n/*function mousePressed() {\n\tgenBoxes()\n}*/\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft,\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}