{
  "sketches": [
    {
      "sketchName": "TIMO_NADJA_FINALFINAL",
      "sketchCode": "\nlet credits = {\n\t\"student_names\": \"Nadja Steiner, Timo Rick\",\n\t\"recode_artist\": \"Georg Nees\",\n\t\"recode_title\": \"Serigraph\",\n\t\"recode_year\": 1965\n} \n\nlet myCoords = [];\nlet loopCount = 15;\nlet loopCount2 = 40;\nlet h,w;\nlet slider;\nlet slider2;\nlet slider3;\nlet button;\nlet opa=0;\nlet buttonValue=0;\nlet buttonValue2=0;\nlet saveCanvas;\nlet bgcolor=255;\nlet strokecolor=0;\n\n\nfunction setup() {\n\tbackground(255);\n\tcreateCanvas(windowWidth, windowHeight);\n//Screenshot preparation\n\tsaveCanvas = createGraphics(height, height);\n\tangleMode(DEGREES);\n\trectMode(CENTER);\n\n//Responsive Slider positions\n\tif(windowWidth<windowHeight) {\n\t\tvar sliderposition2=windowHeight * 0.78;\n\t\tvar abstand=1.2;\n\t\tvar sliderbreite= '80%';\n\t\tvar buttonbreite= '40%';\n\t\tvar buttonpos1= windowWidth/10;\n\t\tvar buttonpos2= windowWidth/2;\n} else {\n\t\tsliderposition2=100;\n\t\tabstand=1;\n\t\tsliderbreite='310px';\n\t\tbuttonbreite= '150px';\n\t\tbuttonpos1= 50;\n\t\tbuttonpos2= 210;\n}\n\n//Sliders & Buttons\n\tslider=createSlider (50,250,150,1);\n\tslider.position(buttonpos1,sliderposition2);\n\tslider.style ('width', sliderbreite);\n\t\n\tslider2=createSlider (50,250,150,1);\n\tslider2.position(buttonpos1,sliderposition2+50/abstand);\n\tslider2.style ('width', sliderbreite);\n\t\n\tslider3=createSlider (50,250,150,1);\n\tslider3.position(buttonpos1,sliderposition2+100/abstand);\n\tslider3.style ('width', sliderbreite);\n\t\n\tbutton=createButton ('transparent');\n\tbutton.position(buttonpos2,sliderposition2+150/abstand);\n\tbutton.mousePressed(changeColor2);\n\tbutton.style ('width', buttonbreite);\n\t\n\tbutton=createButton ('fill squares');\n\tbutton.position(buttonpos1,sliderposition2+150/abstand);\n\tbutton.mousePressed(changeColor);\n\tbutton.style ('width', buttonbreite);\n\t\n\tbutton=createButton ('gradient');\n\tbutton.position(buttonpos1,sliderposition2+183/abstand);\n\tbutton.mousePressed(gradient);\n\tbutton.style ('width', buttonbreite);\n\t\n\tbutton=createButton ('no gradient');\n\tbutton.position(buttonpos2,sliderposition2+183/abstand);\n\tbutton.mousePressed(gradient2);\n\tbutton.style ('width', buttonbreite);\n\t\n\tbutton=createButton ('negativ');\n\tbutton.position(buttonpos1,sliderposition2+216/abstand);\n\tbutton.mousePressed(negativ);\n\tbutton.style('width',buttonbreite);\n\t\n\tbutton=createButton ('positiv');\n\tbutton.position (buttonpos2, sliderposition2+216/abstand);\n\tbutton.mousePressed(positiv);\n\tbutton.style('width',buttonbreite);\n\t\n\tbutton=createButton ('save');\n\tbutton.position(buttonpos1,sliderposition2+249/abstand);\n\tbutton.mousePressed(screenshot);\n\tbutton.style ('width', buttonbreite);\n\tbutton.style ('height', '40px');\n\t\n\tbutton=createButton ('reset');\n\tbutton.position(buttonpos2,sliderposition2+249/abstand);\n\tbutton.mousePressed(laden);\n\tbutton.style ('width', buttonbreite);\n\tbutton.style ('height', '40px');\n\n\n//Grid\t\n\tw = width / loopCount2;\n\th = height / loopCount;\n//Grid breakpoint horizontal device\n\tif(windowWidth<windowHeight) {\n\t\tw = width / 15\n\t\th / height / 5\n}\n\n//Grid applied \n\tfor(let i = 0; i < height / 6; i++) {\n\t\tfor(let j = 0; j < loopCount2; j++) {\n\t\t\tlet x = j * w;\n\t\t\tlet y = i * w + windowHeight * 0.1;\n//Border breakpoint horizontal device \n\t\t\tif(windowWidth<windowHeight) {\n\t\t\t\tvar randresponsive1 = windowWidth * 0.1;\n\t\t\t\tvar randresponsive2 = windowWidth * 0.9;\n\t\t\t\tvar randresponsive3 = windowHeight * 0.33\n} else {\n//Border applied \n\t\t\t\trandresponsive1 = windowWidth * 0.35;\n\t\t\t\trandresponsive2 = windowWidth * 0.65;\n\t\t\t\trandresponsive3 = windowHeight * 0.1\n}\n//applied Border\n\t\t\tif(x > randresponsive1 && x < randresponsive2 && y < windowHeight - (randresponsive3)) {\n\t\t\t\t//create Vector (x=x+random, y=y+random, z=random rotation)\n\t\t\t\tlet pv = createVector(x + random(-i * 1.3, i * 1.3), y + random(-i * 0.5, i * 1.1), random(-i * 0.9, i * 0.9));\n\t\t\t\tmyCoords.push(pv);\n}\n\n}\n}\n\n\tsetupAudio();\n\t return false;\n}\n\n//Button functions\n\tfunction changeColor(){\n\t\topa=255;\n}\n\tfunction changeColor2(){\n\t\topa=0;\n}\n\tfunction gradient(){\n\t\tbuttonValue=2\n\t\topa=255;\n}\n\tfunction gradient2(){\n\t\tbuttonValue=0\n\t\topa=255;\n}\n\tfunction negativ(){\n\t\tbgcolor=0;\n\t\tstrokecolor=255;\n}\n\tfunction positiv(){\n\t\tbgcolor=255;\n\t\tstrokecolor=0;\n}\n\tfunction screenshot() {\n\t\tvar screenshotresponsive = 0;\n//Crop of the screenshot for vertical devices\n\t\tif(windowWidth>windowHeight) {\n\t\tscreenshotresponsive = 0;\n} else {\n\t\tscreenshotresponsive = windowHeight * 0.25;\t\n}\n\tlet c = get(width/2-height/2,0, height, height-screenshotresponsive);\n\t\t saveCanvas.image(c, 0, 0);\n\t\tsave(saveCanvas,\"amazing artwork.jpg\");\n\t\t\t return false;\n}\n\tfunction laden() {\n\t\twindow.location.reload();\n}\n\nfunction draw() {\n\tupdateAudio();\n\tbackground(bgcolor);\n//Array Grid\n\tfor(let i = 0; i < myCoords.length; i++) {\n\t\tlet myCoord = myCoords[i]\n//Mapping the Audio to the rotation\n\t\tlet drehung=map(amp,0,200,0,5);\n\t\t\tif (amp<50){\n\t\t\t\tdrehung=0;\n\t\t\t\t}\n//This Idea of Noise Cancelling is by Nicolas :)\n\t\tmyCoord.z=myCoord.z+drehung;\n\t\t\n//Workaround Button for Gradient (i needs to be inside the for-Loop, so the button just toggles \"ButtonValue\")\n\t\tlet grad=0\n\t\t\tif (buttonValue>1){\n\t\t\t\tgrad=i*0.5\n} else {\n\t\t\t\tgrad=0;\n\t\t\t\t}\n//Styling\n\tpush();\n\tstroke(strokecolor);\n//Mapping audio to strokeWeight\n\tlet strokeW=map(amp,0,300,0,2);\n\t\tstrokeWeight(1+strokeW);\n\t\t\tif (amp<40){\n\t\t\t\tstrokeW=0;\n\t\t}\n//Slider & Button Values applied to the Squares\n\tfill(slider.value()+grad*(i/60),slider2.value()+grad,slider3.value(),opa);\n\t\ttranslate(myCoord.x, myCoord.y);\n\t\trotate(myCoord.z);\n//Mouse Interaction\n\t\t\tif(dist(mouseX, mouseY, myCoord.x, myCoord.y) < 20 ){\n\t\t\tvar mouseRotation=2\n\t\t\tvar mouseSize=20\n\t\t\tvar mouseColor=100\n\t\t\tmyCoord.z = myCoord.z + mouseRotation;\n\t}else {\n\t\tmouseRotation=0\n\t\tmouseSize=0\n\t\tmouseColor=0\n\t\tmyCoord.z=myCoord.z;\n\t}\n//The actual squares\n\t\tsquare(0, 0, w+mouseSize);\n\t\tpop();\n\t}\nreturn false;\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}\n\n//Oli is the best"
    }
  ]
}