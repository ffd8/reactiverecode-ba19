{
  "sketches": [
    {
      "sketchName": "voroni-cells_audio_michelle_salome_neu",
      "sketchCode": "let credits = { \n    \"student_names\": \"Michelle StrÃ¤hler, Salome Habersatter\", \n    \"recode_artist\": \"Leslie Mezei\", \n    \"recode_title\": \"Cell pattern 3\", \n    \"recode_year\": 1974 \n} \n\nlet loadScripts = [\n\t\"https://cdn.jsdelivr.net/npm/voronoi@1.0.0/rhill-voronoi-core.js\"\n];\n\nlet sites = [],\n\tedges, cells, bbox, voronoi;\n\t\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight);\n\t// defines canvas size for voronoi\n\tbbox = {\n\t\txl: 0,\n\t\txr: width,\n\t\tyt: 0,\n\t\tyb: height\n\t};\n\n\t// generates 20 random cells\n\tgenCells()\n\n\t// start voronoi\n\tvoronoi = new Voronoi();\n\tstroke(255);\n\tnoFill();\n\tsetupAudio();\n\t\n}\n\nfunction draw() {\n\tlet mapColor = map(ampEase, 0,100,0,200);\n\tstroke(150+mapColor,mapColor,mapColor)\n\t\n\t/* audio vars: amp, ampEase, fft, waveform */\n\tupdateAudio();\n\tbackground(0);\n\n\t// calculates change in voronoi\n\tresult = voronoi.compute(sites, bbox);\n\tedges = result.edges; // get all edges\n\tcells = result.cells; // get cells\n\t\/\/println(ampEase)\n\tif (ampEase > 200){\n\t\tgenCells()\n\t}\n\n\t// loop through each cell\n\tfor(let i = 0; i < cells.length; i++) {\n\t\tlet c = cells[i].halfedges; // get edges of each cell\n\t\tlet site = cells[i].site;\n\n\t\t//ellipse(site.x, site.y, 5)\n\t\tlet ft = fft[floor(map(i, 0, cells.length, 0, fft.length))]/30;\n\n\t\t// draw each cell as shape\n\t\tbeginShape(LINES); // draw shape as lines only\n\t\tfor(let j = 0; j < c.length; j++) {\n\t\t\tlet edge = c[j].edge;\n\n\n\t\t\tlc = 1;\n\t\t\tif(i % 2 == 0) {\n\t\t\t\tlc = ft//ampEase/10\n\t\t\t}\n\t\t\tfor(let k = 0; k < lc; k++) {\n\n\t\t\t\t// map k between distance of edges -> site.x/y (center)\n\t\t\t\tlet vaxm = map(k / 2, 0, lc, edge.va.x, site.x)\n\t\t\t\tlet vaym = map(k / 2, 0, lc, edge.va.y, site.y)\n\t\t\t\tlet vbxm = map(k / 2, 0, lc, edge.vb.x, site.x)\n\t\t\t\tlet vbym = map(k / 2, 0, lc, edge.vb.y, site.y)\n\n\t\t\t\t// use that mapped value\n\t\t\t\tvertex(vaxm, vaym)\n\t\t\t\tvertex(vbxm, vbym)\n\t\t\t}\n\t\t}\n\t\tendShape(CLOSE);\n\t}\n\n}\n\n\n// add new cells on mousepress\nfunction mousePressed() {\n\n\n\tsites.push({ \n\t\tx: mouseX,\n\t\ty: mouseY,\n\t});\n\t\n\t\n}\n\nfunction genCells(){\n\tsites = []\n\tfor(let i = 0; i < 20; i++) {\n\t\tsites.push({\n\t\t\tx: random(width),\n\t\t\ty: random(height)\n\t\t});\n\t}\n}\n\nfunction keyPressed() {\n\tif (keyCode === 13) {\n\t\tgenCells()\n\t//location.reload();\n\t}\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft, waveform, amp = 0.0,\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}
